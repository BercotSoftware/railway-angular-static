openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:4000
  description: Generated server url
tags:
- name: profile
  description: the profile API
- name: courses
  description: Operations on golf courses
- name: groups
  description: Operations on groups
- name: contacts
  description: Operations on user contacts
- name: events
  description: Operations on events
paths:
  /profile:
    get:
      tags:
      - profile
      summary: GET profile
      operationId: getProfile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      security:
      - bearerAuth: []
    put:
      tags:
      - profile
      summary: PUT profile
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
      security:
      - bearerAuth: []
  /groups/{id}:
    get:
      tags:
      - groups
      summary: GET group
      operationId: findGroup
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
      security:
      - bearerAuth: []
    put:
      tags:
      - groups
      summary: Update a group
      operationId: saveGroup
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfGroupDetails'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
      security:
      - bearerAuth: []
    delete:
      tags:
      - groups
      summary: Delete a group
      operationId: deleteGroup
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Access token is missing or invalid
      security:
      - bearerAuth: []
  /groups/{id}/participants:
    get:
      tags:
      - groups
      summary: Get group participants
      operationId: getGroupParticipants
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: sort
        in: query
        required: false
        schema:
          type: string
          default: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupParticipantsResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      security:
      - bearerAuth: []
    put:
      tags:
      - groups
      summary: "PUT groups/{groupId}/participants"
      operationId: updateParticipants
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfParticipant'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfParticipant'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GolfParticipant'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GolfParticipant'
      security:
      - bearerAuth: []
    post:
      tags:
      - groups
      summary: "POST groups/{id}/participants"
      operationId: createParticipant
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfParticipant'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfParticipant'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfParticipant'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfParticipant'
      security:
      - bearerAuth: []
  /events:
    get:
      tags:
      - events
      summary: GET events
      operationId: findAllEvents
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: sort
        in: query
        required: false
        schema:
          type: string
          default: ""
      - name: pattern
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventsResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      security:
      - bearerAuth: []
    put:
      tags:
      - events
      summary: Save an event given all details
      operationId: saveEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfEvent'
        required: true
      responses:
        "200":
          description: Resource successfully saved
        "400":
          description: Bad request
        "401":
          description: Access token is missing or invalid
      security:
      - bearerAuth: []
    post:
      tags:
      - events
      summary: POST events/create
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfEvent'
        required: true
      responses:
        "200":
          description: Resource successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
      security:
      - bearerAuth: []
  /courses:
    get:
      tags:
      - courses
      summary: GET courses
      operationId: findAllCourses
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: sort
        in: query
        required: false
        schema:
          type: string
          default: ""
      - name: pattern
        in: query
        description: Search pattern
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCoursesResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      security:
      - bearerAuth: []
    put:
      tags:
      - courses
      summary: PUT courses
      operationId: saveGolfCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfCourse'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
      security:
      - bearerAuth: []
    post:
      tags:
      - courses
      summary: POST courses
      operationId: createGolfCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfCourse'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
      security:
      - bearerAuth: []
  /contacts/{id}:
    get:
      tags:
      - contacts
      summary: "GET contacts/{id}"
      operationId: findContactById
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
      security:
      - bearerAuth: []
    put:
      tags:
      - contacts
      summary: Save contact
      operationId: saveContact
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access denied
      security:
      - bearerAuth: []
    delete:
      tags:
      - contacts
      summary: "DELETE contacts/{id}"
      operationId: deleteContact
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access denied
      security:
      - bearerAuth: []
  /contacts/invite:
    put:
      tags:
      - contacts
      summary: PUT contacts/invite
      operationId: sendContactInvitation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
      security:
      - bearerAuth: []
  /groups:
    get:
      tags:
      - groups
      summary: GET groups
      operationId: findAllPaged
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: sort
        in: query
        required: false
        schema:
          type: string
          default: date
      - name: pattern
        in: query
        description: Search pattern
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupsResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      security:
      - bearerAuth: []
    post:
      tags:
      - groups
      summary: Create a group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GolfGroupDetails'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfGroupDetails'
      security:
      - bearerAuth: []
  /contacts:
    get:
      tags:
      - contacts
      summary: Get contacts for the currently logged-in user
      operationId: getContacts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: sort
        in: query
        required: false
        schema:
          type: string
          default: givenName
      - name: pattern
        in: query
        description: Search pattern
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactsResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      security:
      - bearerAuth: []
    post:
      tags:
      - contacts
      summary: Create a new contact
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
      security:
      - bearerAuth: []
  /contacts/decline/{id}:
    post:
      tags:
      - contacts
      summary: "POST contacts/decline/{id}"
      operationId: declineContactInvitation
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access denied
      security:
      - bearerAuth: []
  /contacts/batch:
    post:
      tags:
      - contacts
      summary: Create multiple new contacts
      operationId: batchCreateContacts
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: list of contacts existing or new
              items:
                $ref: '#/components/schemas/Contact'
        required: true
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
      security:
      - bearerAuth: []
  /contacts/accept/{id}:
    post:
      tags:
      - contacts
      summary: "POST contacts/accept/{id}"
      operationId: acceptContactInvitation
      parameters:
      - name: id
        in: path
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
      security:
      - bearerAuth: []
  /groups/{id}/events:
    get:
      tags:
      - groups
      - events
      summary: GET events
      operationId: findGroupEvents
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      - name: startDate
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: endDate
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: sort
        in: query
        required: false
        schema:
          type: string
          default: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupEventsResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      security:
      - bearerAuth: []
  /events/{eventId}:
    get:
      tags:
      - events
      summary: "GET events/{eventId}"
      operationId: findEventById
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
      security:
      - bearerAuth: []
    delete:
      tags:
      - events
      summary: "DELETE events/{eventId}"
      operationId: deleteEvent
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Access token is missing or invalid
      security:
      - bearerAuth: []
  /events/edit/{eventId}:
    get:
      tags:
      - events
      summary: "GET events/edit/{eventId}"
      operationId: editEvent
      parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfEvent'
      security:
      - bearerAuth: []
  /events/byDate:
    get:
      tags:
      - events
      summary: GET events/byDate
      operationId: findByDate
      parameters:
      - name: startDate
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: endDate
        in: query
        required: false
        schema:
          type: string
          format: date-time
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: sort
        in: query
        required: false
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventsResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResponse'
      security:
      - bearerAuth: []
  /courses/{id}:
    get:
      tags:
      - courses
      summary: "GET courses/{id}"
      operationId: findCourseById
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GolfCourse'
      security:
      - bearerAuth: []
    delete:
      tags:
      - courses
      summary: "DELETE courses/{id}"
      operationId: deleteCourse
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
        "401":
          description: Access token is missing or invalid
      security:
      - bearerAuth: []
  /contacts/profile/{id}:
    get:
      tags:
      - contacts
      summary: "GET contacts/profile/{id}"
      operationId: findContactByProfileId
      parameters:
      - name: id
        in: path
        description: Item id
        required: true
        schema:
          maxLength: 24
          minLength: 0
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "401":
          description: Access token is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
      security:
      - bearerAuth: []
components:
  schemas:
    Address:
      type: object
      properties:
        address:
          type: string
          description: Primary address (street)
        address2:
          type: string
          description: "Secondary address (unit, etc)"
        city:
          type: string
          description: City name
        state:
          pattern: "^[A-Za-z]{2,}$"
          type: string
          description: State or province code.
        country:
          pattern: "^[A-Za-z]{2}$"
          type: string
          description: Two-letter country code.
        postalCode:
          pattern: "^[0-9]{5}(?:-[0-9]{4})?$"
          type: string
          description: A valid ZIP code (U.S. format).
      description: address
    Profile:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        phone:
          type: string
        nickname:
          type: string
        picture:
          type: string
        profileName:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        phoneVerified:
          type: boolean
        birthDate:
          type: string
          format: date
        handicap:
          type: number
          format: double
        ghin:
          type: string
        name:
          type: string
        _id:
          type: string
    Facilitator:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        nickname:
          type: string
        email:
          type: string
        phone:
          type: string
        id:
          type: string
        profileId:
          type: string
        status:
          type: string
          enum:
          - New
          - Pending
          - Accepted
          - Declined
          - Expired
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - Player
            - Facilitator
            - Delegate
            - Administrator
            - Creator
        contactId:
          type: string
        title:
          type: string
    GolfGroupDetails:
      type: object
      properties:
        id:
          maxLength: 24
          minLength: 0
          type: string
        name:
          type: string
        description:
          type: string
        invitation:
          type: string
        rules:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/GolfParticipant'
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - Player
            - Facilitator
            - Delegate
            - Administrator
            - Creator
    GolfParticipant:
      type: object
      properties:
        id:
          type: string
        profileId:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        email:
          type: string
        phone:
          type: string
        nickname:
          type: string
        gender:
          type: string
          enum:
          - Unspecified
          - Male
          - Female
        status:
          type: string
          enum:
          - New
          - Pending
          - Accepted
          - Declined
          - Expired
        roles:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - Player
            - Facilitator
            - Delegate
            - Administrator
            - Creator
        handicap:
          type: number
          format: double
        ghin:
          type: string
        name:
          type: string
    Location:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        managed:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
        twitterHandle:
          type: string
        facebookHandle:
          type: string
        instagramHandle:
          type: string
        website:
          type: string
        phone:
          type: string
        email:
          type: string
        staff:
          type: array
          items:
            $ref: '#/components/schemas/Facilitator'
        location:
          type: array
          items:
            type: number
            format: double
    GolfEvent:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        locationId:
          type: string
        invitation:
          type: string
        groupId:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        participants:
          type: array
          items:
            $ref: '#/components/schemas/GolfParticipant'
        status:
          type: string
          enum:
          - Preparation
          - OpenForRegistration
          - Pending
          - Completed
          - Canceled
        teeTime:
          type: string
          format: date-time
          writeOnly: true
    GolfCourse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        managed:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
        twitterHandle:
          type: string
        facebookHandle:
          type: string
        instagramHandle:
          type: string
        website:
          type: string
        phone:
          type: string
        email:
          type: string
        staff:
          type: array
          items:
            $ref: '#/components/schemas/Facilitator'
        location:
          type: array
          items:
            type: number
            format: double
        tees:
          type: array
          items:
            $ref: '#/components/schemas/TeeStation'
    TeeStation:
      type: object
      properties:
        id:
          maxLength: 24
          minLength: 0
          type: string
        name:
          type: string
        color:
          type: string
        gender:
          type: string
          enum:
          - Unspecified
          - Male
          - Female
        numberOfHoles:
          type: integer
          format: int32
        par:
          type: integer
          format: int32
        yardage:
          type: integer
          format: int32
        courseRating:
          type: number
          format: double
        bogeyRating:
          type: number
          format: double
        slopeRating:
          type: integer
          format: int32
      description: Supports storing the ratings per tee station as per the USGA Course
        Ratings site
    AddressEntry:
      type: object
      properties:
        primary:
          type: boolean
          description: Set to true if primary address
        address:
          $ref: '#/components/schemas/Address'
        type:
          type: string
          description: "type of address (e.g. home, mobile, work)"
    Contact:
      type: object
      properties:
        id:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        nickname:
          type: string
        profileId:
          type: string
        ownerId:
          type: string
        googleContactId:
          type: string
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumberEntry'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressEntry'
        emailAddresses:
          type: array
          items:
            $ref: '#/components/schemas/EmailAddressEntry'
        status:
          type: string
          enum:
          - New
          - Pending
          - Accepted
          - Declined
          - Expired
        since:
          type: string
          format: date-time
        token:
          $ref: '#/components/schemas/VerificationToken'
        registered:
          type: boolean
        primaryEmail:
          $ref: '#/components/schemas/EmailAddressEntry'
        primaryEmailAddress:
          type: string
        primaryPhoneNumber:
          type: string
        primaryPhone:
          $ref: '#/components/schemas/PhoneNumberEntry'
        primaryAddress:
          $ref: '#/components/schemas/AddressEntry'
    EmailAddressEntry:
      type: object
      properties:
        primary:
          type: boolean
          description: Set to true if primary e-mail address
        address:
          type: string
          description: e-mail address
        verified:
          type: boolean
          description: Set to true if the email address has been verified
        type:
          type: string
          description: "type of e-mail address (e.g. home, mobile, work)"
    PhoneNumberEntry:
      type: object
      properties:
        primary:
          type: boolean
          description: Set to true if primary phone number
        number:
          type: string
          description: phone number
        verified:
          type: boolean
          description: Set to true if the phone number has been verified
        type:
          type: string
          description: "type of phone number (e.g. home, mobile, work)"
    VerificationToken:
      type: object
      properties:
        id:
          maxLength: 24
          minLength: 0
          type: string
        issueDate:
          type: string
          format: date-time
        expiryDate:
          type: string
          format: date-time
    ContactRequest:
      type: object
      properties:
        id:
          type: string
        replyUrl:
          type: string
        message:
          type: string
    GetGroupsResponse:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/GolfGroupSummary'
    GolfGroupSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        numParticipants:
          type: integer
          format: int32
    PagedResponse:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/GolfGroupSummary'
      description: Items returned as a result of a paged request
    GetGroupParticipantsResponse:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/GolfParticipant'
    GolfEventSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        event:
          $ref: '#/components/schemas/NamedEntity'
        location:
          $ref: '#/components/schemas/Location'
        numParticipants:
          type: integer
          format: int32
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - Preparation
          - OpenForRegistration
          - Pending
          - Completed
          - Canceled
    GroupEventsResponse:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/GolfEventSummary'
    NamedEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    GetEventsResponse:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/GolfEventSummary'
    CourseSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        managed:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
        facebookHandle:
          type: string
        instagramHandle:
          type: string
        twitterHandle:
          type: string
        website:
          type: string
          format: uri
        phone:
          type: string
        email:
          type: string
    GetCoursesResponse:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/CourseSummary'
    ContactSummary:
      type: object
      properties:
        givenName:
          type: string
        familyName:
          type: string
        nickname:
          type: string
        email:
          type: string
        phone:
          type: string
        id:
          type: string
        status:
          type: string
          enum:
          - New
          - Pending
          - Accepted
          - Declined
          - Expired
        since:
          type: string
          format: date
        profileId:
          type: string
        handicap:
          type: number
          format: double
        ghin:
          type: string
    ContactsResponse:
      type: object
      properties:
        totalItems:
          type: integer
          format: int32
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        items:
          type: array
          items:
            $ref: '#/components/schemas/ContactSummary'
